/*
<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:
$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \dots$$</p>
<p>Let us list the factors of the first seven triangle numbers:</p>
\begin{align}
\mathbf 1 &amp;\colon 1\\
\mathbf 3 &amp;\colon 1,3\\
\mathbf 6 &amp;\colon 1,2,3,6\\
\mathbf{10} &amp;\colon 1,2,5,10\\
\mathbf{15} &amp;\colon 1,3,5,15\\
\mathbf{21} &amp;\colon 1,3,7,21\\
\mathbf{28} &amp;\colon 1,2,4,7,14,28
\end{align}
<p>We can see that $28$ is the first triangle number to have over five divisors.</p>
<p>What is the value of the first triangle number to have over five hundred divisors?</p>
*/

#include <iostream>
#include <cstdint>

uint64_t calcNumDivisors(uint64_t number)
{
    uint64_t numDivisors{2};
    for (uint64_t div{2}; div <= number/2; ++div)
    {
        if (number % div == 0)
        {
            ++numDivisors;
        }
    }
    return numDivisors;
}

int main()
{
    // basically create a triangular number, then 
    // start with 2 (1 and itself) and iterate from 2 to 1/half the number to count the divisors
    // formula for triangular number n * (n+1) / 2
    // if n is even, n is divisible by 2
    // if n is odd, n+1 is divisible by 2
    // either way, all the multiples of n will also be multiples of n * (n + 1), 
    // same for multiples of (n + 1)
    // I don't know if it's a known rule for this, but it seems the total number of multiples for (n) * (n+1)
    // is multiples(n) * multiples(n+1) which means it's possible to calculate number of multiples from n
    // just need to figure out which of n or n+1 is even and divide it by 2
    uint64_t idx{1}; // 2079, 4640, 5264
    uint64_t numDivisors{2};
    while(true)
    {
        if (((idx + 1) < idx))
        {
            std::cout << "overflow at " << idx << std::endl;
            return 0;
        }
        ++idx;
        if ((idx % 2) == 0)
        {
            auto div1 = calcNumDivisors(idx/2);
            auto div2 = calcNumDivisors(idx + 1);
            if (div1 * div2 > 500)
            {
                std::cout << div1 << " " << div2 << std::endl;
                break;
            } 
        }
        else
        {
            auto div1 = calcNumDivisors(idx);
            auto div2 = calcNumDivisors((idx + 1) /2);
            if (div1 * div2 > 500)
            { 
                std::cout << div1 << " " << div2 << std::endl;
                break;
            }
        }
    }
    std::cout << "idx:" << idx << std::endl;
    auto triangularNumber{idx * (idx + 1) / 2};
    std::cout << "triangularNumber:" << triangularNumber << std::endl;
    std::cout << "num divisors: " << calcNumDivisors(triangularNumber) << std::endl;
}