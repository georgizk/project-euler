/*!
<p>The four adjacent digits in the $1000$-digit number that have the greatest product are $9 \times 9 \times 8 \times 9 = 5832$.</p>
<p class="monospace center">
73167176531330624919225119674426574742355349194934<br>
96983520312774506326239578318016984801869478851843<br>
85861560789112949495459501737958331952853208805511<br>
12540698747158523863050715693290963295227443043557<br>
66896648950445244523161731856403098711121722383113<br>
62229893423380308135336276614282806444486645238749<br>
30358907296290491560440772390713810515859307960866<br>
70172427121883998797908792274921901699720888093776<br>
65727333001053367881220235421809751254540594752243<br>
52584907711670556013604839586446706324415722155397<br>
53697817977846174064955149290862569321978468622482<br>
83972241375657056057490261407972968652414535100474<br>
82166370484403199890008895243450658541227588666881<br>
16427171479924442928230863465674813919123162824586<br>
17866458359124566529476545682848912883142607690042<br>
24219022671055626321111109370544217506941658960408<br>
07198403850962455444362981230987879927244284909188<br>
84580156166097919133875499200524063689912560717606<br>
05886116467109405077541002256983155200055935729725<br>
71636269561882670428252483600823257530420752963450<br></p>
<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>
*/
#include <iostream>
#include <string_view>
#include <forward_list>
#include <map>

int main()
{
    static constexpr std::string_view digits{
"73167176531330624919225119674426574742355349194934"
"96983520312774506326239578318016984801869478851843"
"85861560789112949495459501737958331952853208805511"
"12540698747158523863050715693290963295227443043557"
"66896648950445244523161731856403098711121722383113"
"62229893423380308135336276614282806444486645238749"
"30358907296290491560440772390713810515859307960866"
"70172427121883998797908792274921901699720888093776"
"65727333001053367881220235421809751254540594752243"
"52584907711670556013604839586446706324415722155397"
"53697817977846174064955149290862569321978468622482"
"83972241375657056057490261407972968652414535100474"
"82166370484403199890008895243450658541227588666881"
"16427171479924442928230863465674813919123162824586"
"17866458359124566529476545682848912883142607690042"
"24219022671055626321111109370544217506941658960408"
"07198403850962455444362981230987879927244284909188"
"84580156166097919133875499200524063689912560717606"
"05886116467109405077541002256983155200055935729725"
"71636269561882670428252483600823257530420752963450"};

    std::forward_list<std::string_view> tokens;
    std::size_t start{0};
    while (start != digits.npos)
    {
        auto end = digits.find_first_of('0', start);
        auto size = (end != digits.npos) ? end - start : end;
        auto token{digits.substr(start, size)};
        if (token.size() >= 13)
        {
            tokens.push_front(token);
        }
        start = digits.find_first_not_of('0', end);    
    }

    std::forward_list<std::string_view> sequences;
    for (const auto& token : tokens)
    {
        for (std::size_t start{0}; start + 12 < token.size(); ++start)
        {
            sequences.push_front(token.substr(start, 13));
        }
    }
    std::map<std::pair<char, uint8_t>, uint64_t> powers;

    uint64_t largestProduct{0};
    for (const auto& token : sequences)
    {
        std::map<char, uint8_t> charCounts;
        for (const auto& c : token)
        {
            ++charCounts[c];
        }
        uint64_t product{1};
        for (const auto& it : charCounts)
        {
            if (auto p{powers.find(it)}; p == powers.end())
            {
                auto number = static_cast<uint64_t>(it.first - '0');
                uint64_t power{number};
                for (uint8_t i{1}; i < it.second; ++i)
                {
                    power *= number;
                }
                powers[it] = power;
            }
            product *= powers.at(it);
        }
        if (product > largestProduct)
        {
            largestProduct = product;
        }
    }

    std::cout << largestProduct << std::endl;
}